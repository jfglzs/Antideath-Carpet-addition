apply plugin: 'fabric-loom'
apply plugin: 'maven-publish'
apply plugin: 'com.replaymod.preprocess'


version = project.mod_version
group = project.maven_group

def simple_version = 'v' + project.mod_version + '+build.' + new Date().format('yyMMddHHmm')
def short_version = 'v' + project.mod_version
version = simple_version + '-' + project.minecraft_version
println "mcVersion: " + project.mcVersion

group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
    maven {
        url 'https://www.cursemaven.com'
    }
    maven {
        name = "Modrinth"
        url = "https://api.modrinth.com/maven"
    }

    maven { url 'https://maven.aliyun.com/repository/public/' }
    mavenCentral()

    maven {
        url 'https://jitpack.io'
    }
}

loom {
    accessWidenerPath.set(file("aca.accesswidener"))

    runConfigs.all {
        // to make sure it generates all "Minecraft Client (:subproject_name)" applications
        ideConfigGenerated = true
        vmArgs '-Dmixin.debug.export=false'
        runDir '../../run'
    }
}

fabricApi {
	configureDataGeneration {
		client = true
	}
}

configurations {
    modRuntimeOnly.exclude group: 'net.fabricmc', module: 'fabric-loader'
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation("curse.maven:carpet-349239:${project.carpet_core_version}")
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
}

processResources {
    from "aca.accesswidener"

    inputs.property "version", short_version
    inputs.property "minecraft_requirement_version", project.minecraft_requirement_version
    inputs.property "carpet_requirement_version", project.carpet_requirement_version
    inputs.property "loader_requirement_version", project.loader_requirement_version

    filesMatching("fabric.mod.json") {
        def valueMap = [
                "version": short_version,
                "carpet_requirement_version": project.carpet_requirement_version,
                "minecraft_requirement_version": project.minecraft_requirement_version,
                "loader_requirement_version": project.loader_requirement_version,
        ]
        expand valueMap
    }
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
//	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
//	// if it is present.
//	// If you remove this line, sources will not be generated.
//	withSourcesJar()
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

afterEvaluate {

    configurations.runtimeClasspath.forEach { file ->

        if (file.name.startsWith("sponge-mixin")) {

            tasks.named("runClient", JavaExec) {

                jvmArgs("-javaagent:${file.absolutePath}")
            }
        }
    }
}